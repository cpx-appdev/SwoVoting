@page "/"
@using VotingTool.Features.Voting
@implements IDisposable
@inject VotingService VotingService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<h1>SWO Business Applications - Online Voting Tool</h1>

<div class="container mt-5">
    <div class="row">
        <div class="col">
            <EditForm Model="@typeof(string)" OnValidSubmit="UpdateQuestion">
                <div class="input-group mb-3">
                    <InputTextArea id="question" class="form-control" @bind-Value="_question" rows="4" placeholder="Put your question here..." />

                    <div class="input-group-append">
                        <button class="btn btn-primary" type="submit">Update + Reset</button>
                    </div>
                </div>

            </EditForm>
        </div>
    </div>
    <div class="row mt-5">
        <div class="col">
            <button type="button" class="btn btn-outline-primary btn-lg btn-block py-5 @(_voted ? "disabled" : "")"
                    @onclick="@VoteUp">
                <span class="oi oi-thumb-up display-4"></span>
            </button>
        </div>
        <div class="col">
            <button type="button" class="btn btn-outline-secondary btn-lg btn-block py-5 @(_voted ? "disabled" : "")"
                    @onclick="@VoteDown">
                <span class="oi oi-thumb-down display-4"></span>
            </button>
        </div>
    </div>
    <div class="row">
        <div class="col display-4 text-center">@_up</div>
        <div class="col display-4 text-center">@_down</div>
    </div>
</div>

@code
{
    private string _question;
    int _up;
    int _down;
    private bool _voted;
    private Guid _clientId;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _question = VotingService.Question;
        
        var currentResults = VotingService.GetCurrentState();
        _up = currentResults.ThumbsUp;
        _down = currentResults.ThumbsDown;
        _question = VotingService.Question;
        VotingService.VoteChangedEventHandler += OnVoteHasChanged;
        VotingService.ResetEventHandler += OnReset;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await SetClientIp();
    }

    private async Task SetClientIp()
    {
        const string identifier = "VotingClientID";
        if (await LocalStorage.ContainKeyAsync(identifier))
            _clientId = await LocalStorage.GetItemAsync<Guid>(identifier);
        else
        {
            _clientId = Guid.NewGuid();
            await LocalStorage.SetItemAsync(identifier, _clientId);
        }

        _voted = VotingService.HasAlreadyVoted(_clientId);
        StateHasChanged();
    }

    private void OnReset(object sender, EventArgs e)
    {
        _voted = false;
        _question = VotingService.Question;
        InvokeAsync(StateHasChanged);
    }

    private void OnVoteHasChanged(object sender, VotingResultEventArgs e)
    {
        _up = e.ThumbsUp;
        _down = e.ThumbsDown;
        InvokeAsync(StateHasChanged);
    }

    public void VoteUp()
    {
        if (_voted) return;
        VotingService.VoteUp(_clientId);
        _voted = true;
    }

    public void VoteDown()
    {
        if (_voted) return;
        VotingService.VoteDown(_clientId);
        _voted = true;
    }

    private void Reset()
    {
        VotingService.Reset();
    }

    private void UpdateQuestion()
    {
        VotingService.UpdateQuestion(_question);
    }

    public void Dispose()
    {
        VotingService.VoteChangedEventHandler -= OnVoteHasChanged;
        VotingService.ResetEventHandler -= OnReset;
        Console.WriteLine("removed event handlers");
    }

}
